import eduni.simjava.Sim_entity;
import eduni.simjava.Sim_port;
import eduni.simjava.Sim_system;
import eduni.simjava.Sim_event;
import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;
import java.util.*;
import java.io.*;
import java.util.Scanner;
import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;

// The class of the inter-cloud source that represents the users

class User extends Sim_entity {
        private Sim_port out;
	private double job_delay;
        public int m, ident, i =0, mips, CPUclock, CPI;
        String user_name,text,spec,form,job_id = null, userchar, c, softchar;

        User(String name, double delay, int max, String specification, int id, String usercharacteristics, String softcharacteristics, String cloud) {
			 super(name);
			 user_name=name;
			 m=max;
			 job_delay=delay;
			 spec=specification;
			 ident = id;
			 userchar = usercharacteristics;
			 c= cloud;
			 softchar= softcharacteristics;
			 // Port for sending events to the metabroker
			  out = new Sim_port("Out"); add_port(out);
        }

	public void body() {
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        Date date = new Date();	
        printText pt = new printText();
        pt.erasor(true);
        Vector v = new Vector();
        
        UserCharacteristics uc = new UserCharacteristics(userchar);
        UserCharacteristics softwarechar = new UserCharacteristics(softchar);
        
        CPUclock = Integer.parseInt(uc.getUserCPUSpeed())*Integer.parseInt(uc.getUserCPUCores());
        
        ServiceCharacteristics sc = new ServiceCharacteristics(Integer.parseInt(softwarechar.getUserCPI()),CPUclock);
        
        //System.out.println("User: "+uc.getUsername()+": "+user_name +"@"+c+ "-"+ uc.getUserOS()+ "-"+uc.getUserCPUSpeed()+ "MHz-"+ uc.getUserCPUCores()+"Cores-"+uc.getUserMemory()+"GB-"+uc.getUserStorage()+"GB-"+uc.getUserBW()+ "Mbps");
	//System.out.println("User: "+softwarechar.getUsername() +": "+user_name +"@"+c+ "-"+ softwarechar.getUserSW()+ "-"+ softwarechar.getUserInstructions() + "-"+ softwarechar.getUserCPI()+"-"+ softwarechar.getUserHours());
	
	CPI = Integer.parseInt(softwarechar.getUserCPI());
	//System.out.println("MIPS: "+sc.getMips());
	OutputUserRequirements our = new OutputUserRequirements(user_name,uc.getUsername(),uc.getUserOS(),uc.getUserCPUSpeed(),uc.getUserCPUCores(),uc.getUserMemory(),uc.getUserStorage(),uc.getUserBW(),softwarechar.getUserSW(),softwarechar.getUserInstructions(),softwarechar.getUserCPI(),softwarechar.getUserHours(),sc.getMips(),m, user_name);
	
        // Send the services generated by the user to the metabroker (m represents the number of user submissions)
        for (i=0; i < m; i++) {
        	// q is the job id e.g. first user job 1: 1-1
        	job_id =Integer.toString(ident)+"-"+Integer.toString(i); 
		// form represents the data in the form of an object send from user to metabroker
		// q: user-job id, d: delay, n: user name, spec: job specification, out.get_dest(): destination of jobs
		form= job_id + "/" + Double.toString(job_delay) + "/" + user_name + "/" +spec+ "/" +out.get_dest()+ "/"+user_name; 
 		// each job is paused for time d
		sim_hold(job_delay);
		sim_schedule(out, 0.0, 0, (String)form);
		//text for keeping logs
		text = "1: Job "+job_id +"("+spec+")"+" initialized by the user, delay ("+job_delay+")";
		pt.setPrintString(text); 
		pt.getString();
        }

            
         
 }
     
      }
